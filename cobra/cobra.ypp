/*
 * Copyright 2013, Mirek Klimos <myreggg@gmail.com>
 */
%{
  #include <iostream>
  #include <cstdlib>
  #include <cctype>
  #include <cstring>
  #include <string>
  #include <vector>

  #include "formula.h"
  #include "parser.h"
  #include "game.h"

  #define YYERROR_VERBOSE
  extern "C" int yylex();
  extern "C" int yyparse();
  extern "C" int yylineno;
  extern "C" char* yytext;
  void yyerror (const char *error);

  extern Parser m;
%}

%token T_IDENT
%token T_INT
%token T_STRING

/* order of precedence from
 * http://en.wikipedia.org/wiki/Logical_connective#Order_of_precedence
 */
%right T_EQUIV
%right T_IMPLIES
%left T_IMPLIED
%right T_OR
%right T_AND
%right T_NOT

%token T_ATLEAST
%token T_ATMOST
%token T_EXACTLY
%token T_VARS
%token T_INIT
%token T_EXP

%union {
  Formula* formula;
  FormulaList* formula_list;
  Variable* variable;
  VariableSet* variable_list;
  Parametrization* param_range;
  ParamRestrictions* param_restrictions;
  char*    tstr;
  int      tint;
}

/* Lets inform Bison about the type of each terminal and non-terminal */
%type <tstr>     T_IDENT
%type <tstr>     T_STRING
%type <tint>     T_INT
%type <formula>  formula
%type <formula_list> formula_list
%type <variable> variable
%type <variable_list> variable_list
%type <variable_list> variable_set
%type <variable_list> variable_range
%type <param_range> param_range
%type <param_restrictions> param_restriction
%type <param_restrictions> param_restriction_list
%type <param_restrictions> param_restrictions_set
%%

start:
    assignments
  | formula
    {  m.setOnlyFormula($1);  }

assignments :
    assignment
  | assignments assignment

assignment :
    T_VARS '=' '{' variable_list '}'
    {  m.game().setVariables($4);  }
  | T_INIT '=' formula
    {  m.game().setInit($3);  }
  | T_EXP '(' T_STRING ',' param_range ',' param_restrictions_set ')' '{' formula_list '}'
    {  $5->addRestrictions($7);
       m.game().addExperiment(m.get<Experiment>($3, $5, $10)); }

variable :
    T_IDENT
      { std::string x($1); $$ = m.get<Variable>(x); }
  | T_IDENT variable_indices
      { std::string x($1); $$ = m.get<Variable>(x, m.variableIndices()); }

variable_indices :
    T_INT
      { m.variableIndices().clear(); m.variableIndex($1); }
  | variable_indices '_' T_INT
      { m.variableIndex($3); }

variable_range :
    variable '.' '.' variable
      { $$ = VariableSet::Range($1, $4); }

variable_list :
    variable
      { $$ = m.get<VariableSet>(); $$->push_back($1); }
  | variable_range
      { $$ = $1; }
  | variable_list ',' variable
      { $$ = $1; $$->push_back($3); }
  | variable_list ',' variable_range
      { $$ = $1;
        $$->insert($$->begin(), $3->begin(), $3->end()); }

variable_set:
    '{' variable_list '}'
      { $$ = $2; }

param_range :
    variable_set
      { $$ = m.get<Parametrization>(); $$->push_back($1); }
  | variable_set '^' T_INT
      { $$ = m.get<Parametrization>(); $$->insert($$->begin(), $3, $1); }
  | param_range variable_set
      { $$ = $1; $$->push_back($2); }
  | param_range variable_set '^' T_INT
      { $$ = $1; $$->insert($$->begin(), $4, $2); }

param_restriction :
    T_INT '<' T_INT
      { $$ = m.get<ParamRestrictions>($1, $3); }
  | param_restriction '<' T_INT
      { $$ = $1; $$->add($$->last(), $3) }

param_restriction_list :
    param_restriction
      { $$ = $1; }
  | param_restriction_list ',' param_restriction
      { $$ = $1; $$->add($3); }

param_restrictions_set :
    '{' '}'
      { $$ = m.get<ParamRestrictions>(); }
  | '{' param_restriction_list '}'
      { $$ = $2; }

formula :
    '(' formula ')'
      { $$ = $2; }
  | formula T_AND formula
      { $$ = m.get<AndOperator>({ $1, $3 }); }
  | formula T_OR formula
      { $$ = m.get<OrOperator>({ $1, $3 }); }
  | formula T_IMPLIES formula
      { $$ = m.get<ImpliesOperator>($1, $3); }
  | formula T_IMPLIED formula
      { $$ = m.get<ImpliesOperator>($3, $1); }
  | formula T_EQUIV formula
      { $$ = m.get<EquivalenceOperator>($1, $3); }
  | T_ATLEAST '-' T_INT '(' formula_list ')'
      { $$ = m.get<AtLeastOperator>($3, $5); }
  | T_ATMOST '-' T_INT '(' formula_list ')'
      { $$ = m.get<AtMostOperator>($3, $5); }
  | T_EXACTLY '-' T_INT '(' formula_list ')'
      { $$ = m.get<ExactlyOperator>($3, $5); }
  | T_AND '(' formula_list ')'
      { $$ = m.get<AndOperator>($3); }
  | T_OR '(' formula_list ')'
      { $$ = m.get<OrOperator>($3); }
  | T_NOT formula
      { $$ = m.get<NotOperator>($2); }
  | variable
      { $$ = $1; }

formula_list :
    formula
      { $$ = m.get<FormulaList>(); $$->push_back($1); }
  | formula_list ',' formula
      { $1->push_back($3); }
  | variable_range
      { $$ = $1->asFormulaList(); }

%%

void yyerror(const char *error) {
  printf("%d: %s at %s\n", yylineno, error, yytext);
}