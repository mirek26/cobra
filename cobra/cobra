#!/usr/bin/python
import os
import sys
import time
import tempfile
import subprocess
F = None

def input_assert(ok, message):
  if not ok:
    f = sys._getframe(2);
    print "File %s, line %i:\n  Invalid input: %s"%(f.f_code.co_filename, f.f_lineno, message);
    exit(1)

def VARIABLE(s):
  input_assert(type(s) is str, "VARIABLE argument must be a string.")
  __F.write("VARIABLE '{0}'\n".formate(s))

def VARIABLES(lst):
  input_assert(type(lst) is list, "VARIABLES argument must be a list of strings.")
  input_assert(all(type(x) is str for x in lst), "VARIABLES argument must be a list of strings.")
  __F.write("VARIABLES {0}\n".format(",".join(lst)))

def RESTRICTION(s):
  input_assert(type(s) is str, "RESTRICTION argument must be a string (formula).")
  __F.write("RESTRICTION {0}\n".format(s))

def ALPHABET(lst):
  input_assert(type(lst) is list, "ALPHABET argument must be a list of strings.")
  input_assert(all(type(x) is str for x in lst), "ALPHABET argument must be a list of strings.")
  __F.write("ALPHABET {0}\n".format(str(lst)[1:-1]))

def PARAMS_SORTED(lst):
  input_assert(all(type(x) is int for x in lst), "PARAMS_SORTED argument must be a list of ints.")
  __F.write("  PARAMS_SORTED {0}\n".format(",".join(str(x) for x in lst)))

def PARAMS_DISTINCT(lst):
  input_assert(all(type(x) is int for x in lst), "PARAMS_DISTINCT argument must be a list of ints.")
  __F.write("  PARAMS_DISTINCT {0}\n".format(",".join(str(x) for x in lst)))

def MAPPING(name, lst):
  input_assert(type(name) is str, "MAPPING first argument must be a string")
  input_assert(type(lst) is list, "MAPPING second argument must be a list of strings.")
  input_assert(all(type(x) is str for x in lst),  "MAPPING second argument must be a list of strings.")
  __F.write("MAPPING '{0}' {1}\n".format(name, ",".join(lst)))

def EXPERIMENT(name, num):
  __F.write("\nEXPERIMENT '{0}' {1}\n".format(name, num))

def OUTCOME(name, formula, final = True):
  input_assert(type(name) is str, "OUTCOME first argument must be a string.")
  input_assert(type(formula) is str, "OUTCOME second argument must be a string.")
  if final:
    __F.write("  OUTCOME '{0}' {1}\n".format(name, formula))
  else:
    __F.write("  OUTCOMEX '{0}' {1}\n".format(name, formula))

if __name__ == '__main__':
  __start = time.time()
  __filename = ".cobra.in"
  try:
    __F = open(__filename, "w")
  except IOError as e:
    __fout = tempfile.NamedTemporaryFile()
    __filename = __fout.name
    __F = __fout.file
  __execname = os.path.dirname(sys.argv[0])+'/cobra-backend'
  if len(sys.argv) < 2:
    subprocess.call([__execname] + ["-h"])
    exit(1);

  print "Preprocessing...",
  sys.stdout.flush()
  execfile(sys.argv[-1])
  __F.close()
  __end = time.time()
  print "[%.2fs] (%s)" % (__end - __start, __filename)
  sys.stdout.flush()
  if not os.path.isfile(__execname):
    print "cobra-backend not found; run 'make' first. "
    exit(0)
  subprocess.call([__execname] + sys.argv[1:-1] + [__filename])
