/*
 * Copyright 2014, Mirek Klimos <myreggg@gmail.com>
 */
%{
  #include <iostream>
  #include <cstdlib>
  #include <cctype>
  #include <cstring>
  #include <string>
  #include <vector>

  #include "experiment.h"
  #include "formula.h"
  #include "parser.h"
  #include "game.h"

  #define YYERROR_VERBOSE
  extern "C" int yylex();
  extern "C" int yyparse();
  extern "C" int yylineno;
  extern "C" char* yytext;
  void yyerror (const char *error);

  extern Parser m;
%}

%token T_IDENT
%token T_INT
%token T_STRING

/* order of precedence from
 * http://en.wikipedia.org/wiki/Logical_connective#Order_of_precedence
 */
%right T_EQUIV
%right T_IMPLIES
%left  T_IMPLIED
%right T_OR
%right T_AND
%right T_NOT

%token T_ATLEAST
%token T_ATMOST
%token T_EXACTLY

%token T_VARIABLE
%token T_VARIABLES
%token T_RESTRICTION
%token T_ALPHABET
%token T_MAPPING
%token T_EXPERIMENT
%token T_PARAMS_DISTINCT
%token T_PARAMS_SORTED
%token T_OUTCOME

%union {
  Formula* formula;
  Variable* variable;
  std::vector<Variable*>* variable_list;
  std::vector<Formula*>* formula_list;
  std::vector<std::string>* string_list;
  std::vector<uint>* int_list;
  char* tstr;
  uint tint;
}

/* Lets inform Bison about the type of each terminal and non-terminal */
%type <tstr>     T_IDENT
%type <tstr>     T_STRING
%type <tstr>     ident
%type <tint>     T_INT

%type <formula>  formula
%type <variable> variable

%type <string_list> string_list
%type <int_list> int_list
%type <variable_list> variable_list
%type <formula_list> formula_list
%%

start :
    code
  | formula
    {  m.set_only_formula($1);  }

ident :
     T_IDENT
  |  T_STRING

code :
    line
  | code line

line :
    T_VARIABLE ident
    {  m.game().declareVariable(m.get<Variable>($2)); }
  | T_VARIABLES variable_list
    {  m.game().declareVariables($2);  }
  | T_RESTRICTION formula
    {  m.game().addRestriction($2);  }
  | T_ALPHABET string_list
    {  m.game().setAlphabet($2); }
  | T_MAPPING T_STRING variable_list
    {  m.game().addMapping($2, $3) }
  | T_EXPERIMENT T_STRING T_INT
    {  Experiment* e = m.game().addExperiment($2, $3);
       m.set_last_experiment(e); }
  | T_PARAMS_DISTINCT int_list
    { m.last_experiment()->paramsDistinct($2); }
  | T_PARAMS_SORTED int_list
    { m.last_experiment()->paramsSorted($2); }
  | T_OUTCOME T_STRING formula
    {  m.last_experiment()->addOutcome($2, $3); }

variable :
    ident
      { std::string x($1); $$ = m.get<Variable>(x); }

variable_list :
    variable
      { $$ = new std::vector<Variable*>();
        $$->push_back($1); }
  | variable_list ',' variable
      { $$ = $1;
        $$->push_back($3); }

string_list :
    T_STRING
      { std::string x($1);
        $$ = new std::vector<std::string>();
        $$->push_back(x); }
  | string_list ',' T_STRING
      { std::string x($3);
        $$ = $1;
        $$->push_back(x); }

int_list :
    T_INT
      { $$ = new std::vector<uint>();
        $$->push_back($1); }
  | int_list ',' T_INT
      { $$ = $1;
        $$->push_back($3); }

formula :
    '(' formula ')'
      { $$ = $2; }
  | formula T_AND formula
      { $$ = m.get<AndOperator>({ $1, $3 }); }
  | formula T_OR formula
      { $$ = m.get<OrOperator>({ $1, $3 }); }
  | formula T_IMPLIES formula
      { $$ = m.get<ImpliesOperator>($1, $3); }
  | formula T_IMPLIED formula
      { $$ = m.get<ImpliesOperator>($3, $1); }
  | formula T_EQUIV formula
      { $$ = m.get<EquivalenceOperator>($1, $3); }
  | T_ATLEAST '-' T_INT '(' formula_list ')'
      { $$ = m.get<AtLeastOperator>($3, $5); }
  | T_ATMOST '-' T_INT '(' formula_list ')'
      { $$ = m.get<AtMostOperator>($3, $5); }
  | T_EXACTLY '-' T_INT '(' formula_list ')'
      { $$ = m.get<ExactlyOperator>($3, $5); }
  | T_AND '(' formula_list ')'
      { $$ = m.get<AndOperator>($3); }
  | T_OR '(' formula_list ')'
      { $$ = m.get<OrOperator>($3); }
  | T_NOT formula
      { $$ = m.get<NotOperator>($2); }
  | T_IDENT '$' T_INT
      { $$ = m.get<Mapping>($1, m.game().getMappingId($1), $3); }
  | variable
      { $$ = $1; }

formula_list:
    formula
      { $$ = new std::vector<Formula*>();
        $$->push_back($1); }
  | formula_list ',' formula
      { $$ = $1;
        $$->push_back($3); }

%%

void yyerror(const char *error) {
  printf("%d: %s at %s\n", yylineno, error, yytext);
}